type Usuario {
    idUsuario: ID!
    nombre: String!
    correo: String!
    telefono: String!
    fechaRegistro: LocalDate!
    detalleDireccion: String!
    idCiudad: ID!
    nombreCiudad: String!
    idDepartamento: ID!
    nombreDepartamento: String!
    idRol: ID!
    nombreRol: String!
}

input CreateUsuarioInput {
    nombre: String!
    correo: String!
    telefono: String!
    # opcional: si no viene, el backend usará LocalDate.now()
    fechaRegistro: LocalDate
    detalleDireccion: String!
    idCiudad: ID!
    idDepartamento: ID!
    idRol: ID!
    # requerido por BD (NOT NULL) + políticas de seguridad (validadas en DTO)
    contrasena: String!
}

input UpdateUsuarioInput {
    idUsuario: ID!
    nombre: String
    correo: String
    telefono: String
    fechaRegistro: LocalDate
    detalleDireccion: String
    idCiudad: ID
    idDepartamento: ID
    idRol: ID
    # opcional: cambio de contraseña (validada en DTO)
    contrasena: String
}

type UsuarioPage {
    content: [Usuario!]!
    pageInfo: PageInfo!
}

extend type Query {
    usuarioById(id: ID!): Usuario!
    searchUsuarios(q: String, page: Int = 0, size: Int = 10): UsuarioPage!
    usuariosByCiudad(idCiudad: ID!, page: Int = 0, size: Int = 10): UsuarioPage!
    usuariosByDepartamento(idDepartamento: ID!, page: Int = 0, size: Int = 10): UsuarioPage!
    usuariosByRol(idRol: ID!, page: Int = 0, size: Int = 10): UsuarioPage!
}

extend type Mutation {
    createUsuario(input: CreateUsuarioInput!): Usuario!
    updateUsuario(input: UpdateUsuarioInput!): Usuario!
    deleteUsuario(id: ID!): Boolean!
}
